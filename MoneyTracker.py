import tkinter as tk
import customtkinter as ctk
from tkinter import ttk, messagebox, filedialog
import csv
from datetime import datetime
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–º–Ω–∞—è
ctk.set_appearance_mode("Dark")
ctk.set_default_color_theme("dark-blue")


class MoneyTrackerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üí∞ –ê–≤—Ç–æ-–¢—Ä–µ–∫–µ—Ä –§–∏–Ω–∞–Ω—Å–æ–≤ v2.2")
        self.root.geometry("1300x900")

        self.large_font = ("Arial", 14)
        self.xlarge_font = ("Arial", 16, "bold")
        self.xxlarge_font = ("Arial", 18, "bold")

        self.transactions = []
        self.car_deals = []
        self.initial_capital = 0
        self.load_data()

        self.setup_ui()

    def setup_ui(self):
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        style = ttk.Style()
        style.theme_create("custom_style", parent="alt", settings={
            "TNotebook": {"configure": {"background": "#f0f0f0", "tabmargins": [10, 5, 0, 0]}},
            "TNotebook.Tab": {
                "configure": {
                    "font": self.xlarge_font,
                    "padding": [30, 15],
                    "foreground": "#333333",
                    "background": "#e0e0e0",
                    "borderwidth": 1,
                },
                "map": {
                    "background": [("selected", "#f5f5f5")],
                    "expand": [("selected", [1, 1, 1, 0])]
                }
            }
        })
        style.theme_use("custom_style")

        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill="both", expand=True)

        self.add_frame = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.add_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
        self.setup_add_frame()

        self.car_frame = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.car_frame, text="üöó –ê–≤—Ç–æ-—Å–¥–µ–ª–∫–∏")
        self.setup_car_frame()

        self.report_frame = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.report_frame, text="üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç")
        self.setup_report_frame()

        self.settings_frame = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setup_settings_frame()

    def setup_add_frame(self):
        self.add_frame.grid_columnconfigure(1, weight=1)
        ctk.CTkLabel(self.add_frame, text="–ù–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", font=self.large_font).grid(row=0, column=0, columnspan=2,
                                                                                       pady=(0, 20))

        fields = [
            ("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", "combobox", ["–ü—Ä–∏—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"], "–ü—Ä–∏—Ö–æ–¥"),
            ("–°—É–º–º–∞:", "entry", None, "0.00"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ:", "entry", None, ""),
            ("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", "combobox", ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª", "–î—Ä—É–≥–æ–µ"], "–ù–∞–ª–∏—á–Ω—ã–µ")
        ]

        self.entries = {}
        for row, (label, field_type, options, default) in enumerate(fields, start=1):
            lbl = ctk.CTkLabel(self.add_frame, text=label, font=self.large_font)
            lbl.grid(row=row, column=0, sticky="e", pady=5, padx=10)

            if field_type == "entry":
                entry = ctk.CTkEntry(self.add_frame)
                entry.insert(0, default)
            elif field_type == "combobox":
                entry = ctk.CTkComboBox(self.add_frame, values=options)
                entry.set(default)

            entry.grid(row=row, column=1, sticky="ew", pady=5, padx=10)
            self.entries[label] = entry

        # üëá –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
        ctk.CTkButton(
            self.add_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é",
            command=self.add_transaction,
            fg_color="#4CAF50",
            hover_color="#45a049",
            height=40
        ).grid(row=len(fields) + 1, column=0, columnspan=2, pady=20, sticky="we")

    def setup_car_frame(self):
        self.car_frame.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(self.car_frame, text="–ù–æ–≤–∞—è –∞–≤—Ç–æ-—Å–¥–µ–ª–∫–∞", font=self.large_font).grid(
            row=0, column=0, columnspan=2, pady=(0, 20))

        car_fields = [
            ("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ:", "entry", None, ""),
            ("–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:", "entry", None, datetime.now().strftime("%d.%m.%Y")),
            ("–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:", "entry", None, "0.00"),
            ("–¢–∏–ø –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏:", "combobox", ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª", "–î—Ä—É–≥–æ–µ"], "–ù–∞–ª–∏—á–Ω—ã–µ"),
            ("–§–ò–û –ø—Ä–æ–¥–∞–≤—Ü–∞:", "entry", None, ""),  # –ù–æ–≤–æ–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            ("–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏:", "entry", None, datetime.now().strftime("%d.%m.%Y")),
            ("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:", "entry", None, "0.00"),
            ("–¢–∏–ø –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏:", "combobox", ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª", "–î—Ä—É–≥–æ–µ"], "–ù–∞–ª–∏—á–Ω—ã–µ"),
            ("–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", "entry", None, ""),  # –ù–æ–≤–æ–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            ("–ù–∞ –∫–æ–º–∏—Å—Å–∏–∏:", "combobox", ["–î–∞", "–ù–µ—Ç"], "–ù–µ—Ç"),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            ("–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã:", "entry", None, "0.00"),
            ("–¢–∏–ø –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤:", "combobox", ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª", "–î—Ä—É–≥–æ–µ"], "–ù–∞–ª–∏—á–Ω—ã–µ"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:", "entry", None, "")
        ]

        self.car_entries = {}
        for row, (label, field_type, options, default) in enumerate(car_fields, start=1):
            ctk.CTkLabel(self.car_frame, text=label).grid(
                row=row, column=0, padx=10, pady=5, sticky="e")

            if field_type == "combobox":
                entry = ctk.CTkComboBox(self.car_frame, values=options)
                entry.set(default)
            else:
                entry = ctk.CTkEntry(self.car_frame)
                entry.insert(0, default)

            entry.grid(row=row, column=1, padx=10, pady=5, sticky="we")
            self.car_entries[label.replace(":", "")] = entry

        ctk.CTkButton(
            self.car_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-—Å–¥–µ–ª–∫—É",
            command=self.add_car_deal,
            fg_color="#2196F3",
            hover_color="#0b7dda",
            height=40
        ).grid(row=len(car_fields) + 1, column=0, columnspan=2, pady=20, sticky="we")

    def setup_settings_frame(self):
        ctk.CTkLabel(self.settings_frame, text="–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:", font=self.large_font).pack(pady=(20, 5))
        self.capital_entry = ctk.CTkEntry(self.settings_frame)
        self.capital_entry.insert(0, str(self.initial_capital))
        self.capital_entry.pack()

        def save_capital():
            try:
                self.initial_capital = float(self.capital_entry.get())
                self.save_data()
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω.")
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        ctk.CTkButton(self.settings_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª", command=save_capital).pack(pady=10)
        ctk.CTkButton(self.settings_frame, text="üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel", command=self.import_from_excel).pack(pady=10)
        ctk.CTkButton(self.settings_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", command=self.export_to_excel).pack(pady=10)

    def import_from_excel(self):
        path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if not path:
            return
        try:
            df = pd.read_excel(path, sheet_name=None)
            if "Transactions" in df:
                self.transactions = df["Transactions"].to_dict("records")
            if "CarDeals" in df:
                self.car_deals = df["CarDeals"].to_dict("records")
            if "Config" in df and "initial_capital" in df["Config"].columns:
                self.initial_capital = df["Config"].iloc[0]["initial_capital"]
                self.capital_entry.delete(0, tk.END)
                self.capital_entry.insert(0, str(self.initial_capital))
            self.save_data()
            self.update_report()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Excel.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")

    def export_to_excel(self):
        path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
        if not path:
            return
        try:
            with pd.ExcelWriter(path, engine="openpyxl") as writer:
                pd.DataFrame(self.transactions).to_excel(writer, sheet_name="Transactions", index=False)
                pd.DataFrame(self.car_deals).to_excel(writer, sheet_name="CarDeals", index=False)
                pd.DataFrame([{"initial_capital": self.initial_capital}]).to_excel(writer, sheet_name="Config", index=False)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

    def setup_report_frame(self):
        self.report_frame.grid_columnconfigure(0, weight=1)
        self.report_frame.grid_rowconfigure(1, weight=1)

        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.configure("Treeview.Heading", font=self.large_font)
        style.configure("Treeview", font=self.large_font, rowheight=35)

        # –ö–æ–ª–æ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        columns = {
            "#1": {"name": "date", "text": "–î–∞—Ç–∞", "width": 180, "anchor": "center"},
            "#2": {"name": "type", "text": "–¢–∏–ø", "width": 120, "anchor": "center"},
            "#3": {"name": "amount", "text": "–°—É–º–º–∞", "width": 150, "anchor": "e"},
            "#4": {"name": "description", "text": "–û–ø–∏—Å–∞–Ω–∏–µ", "width": 300},
            "#5": {"name": "category", "text": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "width": 150, "anchor": "center"}
        }

        self.tree = ttk.Treeview(self.report_frame, columns=list(columns.keys()), show="headings")
        for col, params in columns.items():
            self.tree.heading(col, text=params["text"])
            self.tree.column(col, width=params["width"], anchor=params.get("anchor", "w"))

        # –ö–æ–ª–æ–Ω–∫–∏ –∞–≤—Ç–æ-—Å–¥–µ–ª–æ–∫
        car_columns = {
            "#1": {"name": "model", "text": "–ú–æ–¥–µ–ª—å", "width": 150, "anchor": "center"},
            "#2": {"name": "buy_date", "text": "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", "width": 120, "anchor": "center"},
            "#3": {"name": "buy_price", "text": "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏", "width": 120, "anchor": "e"},
            "#4": {"name": "buy_type", "text": "–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", "width": 120, "anchor": "center"},
            "#5": {"name": "seller_name", "text": "–ü—Ä–æ–¥–∞–≤–µ—Ü", "width": 150, "anchor": "center"},
            "#6": {"name": "sell_date", "text": "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏", "width": 120, "anchor": "center"},
            "#7": {"name": "sell_price", "text": "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", "width": 120, "anchor": "e"},
            "#8": {"name": "sell_type", "text": "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏", "width": 120, "anchor": "center"},
            "#9": {"name": "buyer_name", "text": "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "width": 150, "anchor": "center"},
            "#10": {"name": "on_commission", "text": "–ö–æ–º–∏—Å—Å–∏—è", "width": 100, "anchor": "center"},
            "#11": {"name": "expenses", "text": "–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã", "width": 120, "anchor": "e"},
            "#12": {"name": "expenses_type", "text": "–û–ø–ª–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤", "width": 120, "anchor": "center"},
            "#13": {"name": "profit", "text": "–ü—Ä–∏–±—ã–ª—å", "width": 120, "anchor": "e"},
            "#14": {"name": "expenses_desc", "text": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤", "width": 200}
        }

        self.car_tree = ttk.Treeview(self.report_frame, columns=list(car_columns.keys()), show="headings")
        for col, params in car_columns.items():
            self.car_tree.heading(col, text=params["text"])
            self.car_tree.column(col, width=params["width"], anchor=params.get("anchor", "w"))

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        scrollbar = ttk.Scrollbar(self.report_frame, orient="vertical")
        car_scrollbar = ttk.Scrollbar(self.report_frame, orient="vertical")

        self.tree.grid(row=1, column=0, sticky="nsew", padx=10, pady=(0, 10))
        self.car_tree.grid(row=3, column=0, sticky="nsew", padx=10, pady=(20, 10))
        scrollbar.grid(row=1, column=1, sticky="ns")
        car_scrollbar.grid(row=3, column=1, sticky="ns")

        self.tree.configure(yscrollcommand=scrollbar.set)
        self.car_tree.configure(yscrollcommand=car_scrollbar.set)
        scrollbar.configure(command=self.tree.yview)
        car_scrollbar.configure(command=self.car_tree.yview)

        # –ü–∞–Ω–µ–ª—å –∏—Ç–æ–≥–æ–≤
        self.summary_panel = ctk.CTkFrame(self.report_frame)
        self.summary_panel.grid(row=4, column=0, columnspan=2, sticky="we", padx=10, pady=10)

        summary_items = [
            ("initial_capital", "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:", f"{self.initial_capital:,.2f} ‚ÇΩ", self.xlarge_font),
            ("total_income", "–û–±—â–∏–π –ø—Ä–∏—Ö–æ–¥:", "0.00 ‚ÇΩ", self.xlarge_font),
            ("total_expense", "–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:", "0.00 ‚ÇΩ", self.xlarge_font),
            ("additional_investment", "–î–æ–ø. –≤–ª–æ–∂–µ–Ω–∏—è:", "0.00 ‚ÇΩ", self.xlarge_font),
            ("car_profit", "–ü—Ä–∏–±—ã–ª—å —Å –∞–≤—Ç–æ:", "0.00 ‚ÇΩ", self.xxlarge_font),
            ("total_profit", "–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:", "0.00 ‚ÇΩ", self.xxlarge_font)
        ]

        self.summary_labels = {}
        for i, (name, text, value, font) in enumerate(summary_items):
            frame = ctk.CTkFrame(self.summary_panel, width=220)
            frame.grid(row=0, column=i, padx=5)
            ctk.CTkLabel(frame, text=text, font=self.large_font).pack()
            self.summary_labels[name] = ctk.CTkLabel(frame, text=value, font=font)
            self.summary_labels[name].pack()

        self.update_report()

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        key_order = ["date", "type", "amount", "description", "category"]
        car_key_order = [
            "model", "buy_date", "buy_price", "buy_type", "seller_name",
            "sell_date", "sell_price", "sell_type", "buyer_name", "on_commission",
            "expenses", "expenses_type", "profit", "expenses_desc"
        ]

        self.tree.bind(
            "<Double-1>",
            lambda event: self._handle_treeview_double_click(
                event,
                self.tree,
                lambda tree, item, col: self.edit_cell(tree, item, col, self.transactions, key_order)
            )
        )

        self.car_tree.bind(
            "<Double-1>",
            lambda event: self._handle_treeview_double_click(
                event,
                self.car_tree,
                lambda tree, item, col: self.edit_cell(tree, item, col, self.car_deals, car_key_order)
            )
        )

    def edit_cell(self, tree, item, col_index, data_list, key_order):
        x, y, width, height = tree.bbox(item, f"#{col_index + 1}")
        value = tree.item(item, "values")[col_index]

        entry = ctk.CTkEntry(tree, width=width, height=height)
        entry.insert(0, value)
        entry.place(x=x, y=y)

        def save_edit(event=None):
            new_val = entry.get()
            values = list(tree.item(item, "values"))
            values[col_index] = new_val
            tree.item(item, values=values)
            entry.destroy()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ data_list
            index = tree.index(item)

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            if index < len(data_list) and col_index < len(key_order):
                key = key_order[col_index]

                cleaned = new_val.replace(",", "")
                try:
                    if key in ["amount", "buy_price", "sell_price", "expenses", "profit"]:
                        cleaned = float(cleaned)
                except ValueError:
                    pass

                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ –Ω—É–∂–Ω—ã–π –∫–ª—é—á –µ—Å—Ç—å
                if isinstance(data_list[index], dict):
                    data_list[index][key] = cleaned

            self.save_data()
            self.update_report()

        entry.bind("<Return>", save_edit)
        entry.bind("<FocusOut>", save_edit)
        entry.focus_set()

    def _handle_treeview_double_click(self, event, tree, edit_callback):
        item = tree.identify_row(event.y)
        column = tree.identify_column(event.x)
        if not item or not column:
            return
        col_index = int(column[1:]) - 1
        edit_callback(tree, item, col_index)

    def add_transaction(self):
        try:
            operation = self.entries["–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:"].get()
            amount = float(self.entries["–°—É–º–º–∞:"].get())
            description = self.entries["–û–ø–∏—Å–∞–Ω–∏–µ:"].get().strip()
            category = self.entries["–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"].get()

            if not description:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!")
                return
            if amount <= 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return

            transaction = {
                "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
                "type": operation,
                "amount": amount if operation == "–ü—Ä–∏—Ö–æ–¥" else -amount,
                "description": description,
                "category": category
            }

            self.transactions.append(transaction)
            self.save_data()

            self.entries["–°—É–º–º–∞:"].delete(0, tk.END)
            self.entries["–°—É–º–º–∞:"].insert(0, "0.00")
            self.entries["–û–ø–∏—Å–∞–Ω–∏–µ:"].delete(0, tk.END)

            self.update_report()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

    def add_car_deal(self):
        try:
            model = self.car_entries["–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ"].get().strip()
            buy_date = self.car_entries["–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏"].get().strip()
            buy_price = float(self.car_entries["–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"].get())
            buy_type = self.car_entries["–¢–∏–ø –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏"].get()
            seller_name = self.car_entries["–§–ò–û –ø—Ä–æ–¥–∞–≤—Ü–∞"].get().strip()  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            sell_date = self.car_entries["–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏"].get().strip()
            sell_price = float(self.car_entries["–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"].get())
            sell_type = self.car_entries["–¢–∏–ø –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏"].get()
            buyer_name = self.car_entries["–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"].get().strip()  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            on_commission = self.car_entries["–ù–∞ –∫–æ–º–∏—Å—Å–∏–∏"].get()  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            expenses = float(self.car_entries["–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã"].get())
            expenses_type = self.car_entries["–¢–∏–ø –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"].get()
            expenses_desc = self.car_entries["–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤"].get().strip()

            if not model:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ!")
                return

            profit = sell_price - buy_price - expenses

            car_deal = {
                "model": model,
                "buy_date": buy_date,
                "buy_price": buy_price,
                "buy_type": buy_type,
                "seller_name": seller_name,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                "sell_date": sell_date,
                "sell_price": sell_price,
                "sell_type": sell_type,
                "buyer_name": buyer_name,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                "on_commission": on_commission,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                "expenses": expenses,
                "expenses_type": expenses_type,
                "profit": profit,
                "expenses_desc": expenses_desc
            }

            self.car_deals.append(car_deal)
            self.save_data()

            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            for entry in self.car_entries.values():
                if isinstance(entry, ctk.CTkEntry):
                    entry.delete(0, tk.END)
                elif isinstance(entry, ctk.CTkComboBox):
                    entry.set("–ù–∞–ª–∏—á–Ω—ã–µ")  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            self.update_report()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–≤—Ç–æ-—Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")

    def save_settings(self):
        try:
            self.initial_capital = float(self.initial_capital_entry.get().replace(",", ""))
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            self.update_report()
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞!")

    def update_report(self):
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for item in self.tree.get_children():
            self.tree.delete(item)
        for item in self.car_tree.get_children():
            self.car_tree.delete(item)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–ø–µ—Ä–∞—Ü–∏–π
        for tr in sorted(self.transactions, key=lambda x: x["date"], reverse=True):
            self.tree.insert("", "end", values=(
                tr["date"],
                tr["type"],
                f"{abs(tr['amount']):,.2f}",
                tr["description"],
                tr["category"]
            ))

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–≤—Ç–æ-—Å–¥–µ–ª–æ–∫
        for deal in self.car_deals:
            self.car_tree.insert("", "end", values=(
                deal["model"],
                deal["buy_date"],
                f"{deal['buy_price']:,.2f}",
                deal["buy_type"],
                deal.get("seller_name", ""),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                deal["sell_date"],
                f"{deal['sell_price']:,.2f}",
                deal["sell_type"],
                deal.get("buyer_name", ""),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                deal.get("on_commission", "–ù–µ—Ç"),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                f"{deal['expenses']:,.2f}",
                deal["expenses_type"],
                f"{deal['profit']:,.2f}",
                deal["expenses_desc"]
            ))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
        self.update_summary()

    def update_summary(self):
        total_income = sum(t["amount"] for t in self.transactions if t["type"] == "–ü—Ä–∏—Ö–æ–¥")
        total_expense = abs(sum(t["amount"] for t in self.transactions if t["type"] == "–†–∞—Å—Ö–æ–¥"))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è (—Ä–∞—Å—Ö–æ–¥—ã —Å–≤–µ—Ä—Ö –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞)
        additional_investment = max(0, total_expense - self.initial_capital)

        # –ü—Ä–∏–±—ã–ª—å —Å –∞–≤—Ç–æ
        car_profit = sum(deal["profit"] for deal in self.car_deals)

        # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
        total_profit = car_profit + total_income - max(0, total_expense - self.initial_capital)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        self.summary_labels["initial_capital"].configure(text=f"{self.initial_capital:,.2f} ‚ÇΩ")
        self.summary_labels["total_income"].configure(text=f"{total_income:,.2f} ‚ÇΩ")
        self.summary_labels["total_expense"].configure(text=f"{total_expense:,.2f} ‚ÇΩ")
        self.summary_labels["additional_investment"].configure(text=f"{additional_investment:,.2f} ‚ÇΩ")
        self.summary_labels["car_profit"].configure(text=f"{car_profit:,.2f} ‚ÇΩ")
        self.summary_labels["total_profit"].configure(text=f"{total_profit:,.2f} ‚ÇΩ")

    def load_data(self):
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            with open("transactions.csv", "r", newline="", encoding="utf-8") as f:
                reader = csv.DictReader(f)
                self.transactions = [{
                    "date": row["date"],
                    "type": row["type"],
                    "amount": float(row["amount"]),
                    "description": row["description"],
                    "category": row["category"]
                } for row in reader]

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ-—Å–¥–µ–ª–æ–∫
            with open("car_deals.csv", "r", newline="", encoding="utf-8") as f:
                reader = csv.DictReader(f)
                self.car_deals = [{
                    "model": row["model"],
                    "buy_date": row["buy_date"],
                    "buy_price": float(row["buy_price"]),
                    "buy_type": row.get("buy_type", "–ù–∞–ª–∏—á–Ω—ã–µ"),
                    "seller_name": row.get("seller_name", ""),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                    "sell_date": row["sell_date"],
                    "sell_price": float(row["sell_price"]),
                    "sell_type": row.get("sell_type", "–ù–∞–ª–∏—á–Ω—ã–µ"),
                    "buyer_name": row.get("buyer_name", ""),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                    "on_commission": row.get("on_commission", "–ù–µ—Ç"),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
                    "expenses": float(row["expenses"]),
                    "expenses_type": row.get("expenses_type", "–ù–∞–ª–∏—á–Ω—ã–µ"),
                    "profit": float(row["profit"]),
                    "expenses_desc": row["expenses_desc"]
                } for row in reader]

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
            with open("settings.csv", "r", newline="", encoding="utf-8") as f:
                reader = csv.DictReader(f)
                for row in reader:
                    self.initial_capital = float(row.get("initial_capital", 0))

        except FileNotFoundError:
            self.transactions = []
            self.car_deals = []
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")
            self.transactions = []
            self.car_deals = []

    def save_data(self):
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            with open("transactions.csv", "w", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=["date", "type", "amount", "description", "category"])
                writer.writeheader()
                writer.writerows(self.transactions)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ-—Å–¥–µ–ª–æ–∫
            with open("car_deals.csv", "w", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=[
                    "model", "buy_date", "buy_price", "buy_type", "seller_name",
                    "sell_date", "sell_price", "sell_type", "buyer_name", "on_commission",
                    "expenses", "expenses_type", "profit", "expenses_desc"
                ])
                writer.writeheader()
                writer.writerows(self.car_deals)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            with open("settings.csv", "w", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=["initial_capital"])
                writer.writeheader()
                writer.writerow({"initial_capital": self.initial_capital})

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")


if __name__ == "__main__":
    root = ctk.CTk()
    app = MoneyTrackerApp(root)
    root.mainloop()
